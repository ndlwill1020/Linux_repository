创建管道实现进程间通信：pipe()
#include <unistd.h>
int pipe(int fd[2]);//返回值：失败：－1  成功：0

fd[0]用于读取数据 fd[1]用于写入数据
这一对文件描述符（fd[0],fd[1]）都是阻塞的

特点：
单向通道
管道内部传输的数据流是字节流
管道容量有限制

－－－－－－－－－－－－－－－－－－－－－－
创建双向管道实现进程间通信：socketpair()
#include <sys/types.h>
#include <sys/socket.h>
int socketpair(int domain, int type, int protocol, int fd[2]);//返回值：失败：－1  成功：0

－－－－－－－－－－－－－－－－－－－－－－
创建共享内存实现进程间通信：mmap()
#include <sys/mman.h>
void* mmap(void* start, size_t length, int prot, int flags, int fd, off_t offset);
int munmap(void* start, size_t length);//释放 成功：0 失败：－1

prop参数用来设置内存段的访问权限：
PROT_READ 内存段可读
PROT_WRITE 内存段可写
PROT_EXEC 内存段可执行
PROT_NONE 内存段不能被访问

flags参数：可以1个或多个按位或
MAP_SHARED 在进程间共享这段内存
MAP_PRIVATE 内存段为调用进程所私有
MAP_ANONYMOUS 这段内存不是从文件映射而来
MAP_FIXD 内存段必须位于start参数指定的地址处
MAP_HUGETLB 按照“大内存页面”来分配内存空间

－－－－－－－－－－－－－－－－－－－－－－
用于修改描述符属性fcntl()
#include <fcntl.h>
int fcntl(int fd, int cmd,...);

cmd:
F_GETFL 获取fd的状态标志
F_SETFL 设置fd的状态标志

eg:将文件描述符设置为非阻塞
int setNonblocking(int fd){
	int old_option = fcntl(fd, F_GETFL);
	int new_option = old_option | O_NONBLOCK;
	fcntl(fd, F_SETFL,new_option);
	return new_option;//返回设置后的状态标志
}

－－－－－－－－－－－－－－－－－－－－－－splice()
用于两个文件描述符之间移动数据
#include <fcntl.h>  //失败：－1
ssize_t splice(int fd_in, loff_t* off_in,int fd_out,loff_t* off_out,size_t len, unsigned int flags);

flags含义：
SPLICE_F_MOVE 按整页内存移动数据
SPLICE_F_NONBLOCK 非阻塞的splice操作
SPLICE_F_MORE 给内核一个提示，以后的操作读取更多数据
SPLICE_F_GIFT 对splice没有效果

注意：
fd_in喝fd_out必须至少有一个是管道文件描述符
返回值为0时，表示没有数据需要移动
