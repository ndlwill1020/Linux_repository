error是全局变量

client  先写后读
1.建立套接字
＃include <sys/socket.h>
int socket(int domain, int type, int protocol);//成功返回非负数，失败返回－1

第一个int参数为Socket的地址方式(地址族)，所以需要选择参数AF_INET(适用于地址族IPv4)。

第二个int参数为Socket的类型，在Socket中提供了两种类型：SOCK_STREAM和SOCK_DGRAM。SOCK_STREAM表明可靠的流传送服务；而SOCK_DGRAM则表明数据以数据报（Datagrams）的形式通过Socket（UDP），本文主要讲解SOCK_STREAM，因为它的使用更为广泛。
 
第三个int参数为所使用的协议，使用0即可。

eg:
//sockfd表示socket句柄
if((sockfd = socket(AF_INET, SOCK_STREAM, 0)) == -1)
{
	perror("socket");
    exit(1);
}
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
2.连接远程主机 ＃include <sys/socket.h>  ＃include <sys/types.h>
int connect(int sockfd, struct sockaddr *serv_addr, int addrlen);//返回0成功 －1失败
第一个参数 是socket()返回的套接字
第二个参数 struct sockaddr_in的地址
第三个参数sizeof(struct sockaddr_in)

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
3.关闭套接字 ＃include <unistd.h>
int close(int sockfd)//成功返回0 失败－1  close要等待关闭过程完成才返回
close只是将socket fd引用计数减1，引用计数为0时，才真正的关闭套接字
读写双端关闭

/*
howto:
SHUT_RE关闭读
SHUT_WR关闭写
SHUT_RDWR同时关闭读写
*/
int shutdown(int sockfd, int howto);//立即关闭
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
4.socket I/O

send(),recv()  readv(),writev()  sendmsg(),recvmsg()   sendto(),recvfrom()  read(),write()等等

read(),write()是常用的IO接口 可以对任何打开的文件描述符进行IO而不仅仅是套接字
//read  &&  write   #include <unistd.h>
int read(int sockfd, void *buf, size_t nbytes);//buf用于保存数据的缓冲区 nbytes是期望读入的字节数  返回成功读入的字节数 返回0表示已经读到文件的结束 －1表示出错并设置errno
int write(int sockfd, void *buf, size_t nbytes);//返回成功写入的字节数 －1出错并设置errno  向已关闭的套接字多次调用write()会引发SIGPIPE信号  
while(){
	if(write() < 0){//小于0表示出错
		if(errno == EINTR){//这个错误表示中断 要做处理
			continue;
		}
	}
}
要对read和write的返回值做检查＃＃＃

一个文件描述符的IO可以是阻塞或非阻塞的方式（通过调用对fcntl()设置O_NONBLOCK选项或动调用ioctl()对文件描述符设置FIONBIO）,对套接字也适用
默认套接字是阻塞的，read()和write()会阻塞在IO操作上，直到以下几种情况发生才会返回：
1.有数据到来或写出的数据被对方TCP层确认才返回，IO函数返回实际读入或写出的字节数
2.套接字出错
3.套接字关闭
4.阻塞时收到了信号

----------------------------------------------------
//send  &&  recv   ＃include <sys/socket.h>
第一个参数为套接字的句柄。
第二个参数为数据缓冲区。
第三个参数为数据长度。
最后一个参数有点特殊，这个参数是为了让BSD Socket能支持“带外数据”，何谓“带外数据”？顾名思义，就是“带内以外的数据”，而带内数据就是常规的按照Socket字节流顺序进行传递的数据。通常情况下，数据由连接的一端流到接收的一端，并且认为数据的所有字节都是精确排序的，晚写入的字节绝不会早于先写入的字节到达。但是如果我们“挂断了电话”，而接收方还有大量已经被接收的缓冲数据，这些数据还没被程序读取，那么接收方需要在读取这些缓冲的“带内数据”之前先读取一个标识取消的请求，这个请求就可以利用带外请求的方法进行传送。请求带外数据传送需要把标识位置为MSG_OOB
int send(int sockfd, const void *msg, int len, int flags); //根据返回值来判断数据是否发送完毕
int recv(int sockfd,void *buf,int len,unsigned int flags); //根据返回值来判断数据是否接收完毕 返回值－1表示发生错误

recv的flags:
MSG_DONTWAIT 非阻塞操作，立即返回，不等待
MSG_WERRQUEUE 错误消息从套接字错误队列接受
MSG_OOB 接受带外数据
MSG_PEEK 查看数据，不进行数据缓冲区的清空（查看读缓冲区的数据而不取出）
MSG_TRUNC 返回所有的数据
MSG_WAITALL 等待所有消息(读操作读取到一定数量字节后才返回)

recv的errno:
EAGIN 	套接字定义为非阻塞，操作采用了阻塞
EBADF	参数sockfd不是合法的描述符
EINTR	接收到中断信号
EINVAL	传递了不合法参数
EFAULT	接收缓冲区指针在此进程之外
ECONNREFUSED	远程主机不允许此操作

send的errno:
EACCES	套接字不可写
EPIPE	套接字已经关闭
ENOTCONN	套接字没有连接
ENOMEM	没有足够内存
ECONNRESET	连接断开
----------------------------------------------------
readv() & writev()
#include <sys/uio.h>
ssize_t readv(int fd, struct iovec* vector, int count);
ssize_t sendv(int fd, const struct iovec* vector, int count);

struct iovec{
	void* iov_base;//缓冲开始地址
	size_t iov_len;//缓冲长度
};

----------------------------------------------------
recvmsg() & sendmsg()
#include <sys/socket.h>
ssize_t recvmsg(int fd, struct msghdr* msg, int flags);
ssize_t sendmsg(int fd, struct msghdr* msg, int flags);

struct msghdr{
	void* msg_name;
	socklen_t msg_namelen;
	struct iovec* msg_iov;
	int msg_iovlen;
	void* msg_control;
	socklen_t msg_controllen;
	int msg_flags;
}

===============================================================
server  先读再写
1.为套接字绑定本地端口和地址
＃include <sys/socket.h>  ＃include <sys/types.h>
int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);//成功返回0 失败－1  
sockfd   是socket()返回的套接字，表示监听套接字
addr 用于指定本地端口和地址
addrlen 指出addr结构的字节数

一台主机可以有多个网络接口和ip地址，如果要响应所有接口上的连接请求    使用INADDR_ANY

2.监听
＃include <sys/socket.h>
int listen(int sockfd, int backlog);//成功返回0 失败－1
backlog表示接受请求的个数  

3.接受连接
＃include <sys/socket.h>
int accept(int sockfd, const struct sockaddr *addr, socklen_t addrlen);//返回非负 表示成功，返回值为一个新的套接字，这个套接字表示与客户的TCP连接，这个套接字（称为已连接套接字）和客户通讯